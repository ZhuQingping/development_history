条款01: 视C++为一个语言联邦
        View C++ as a federation of languages.

    一开始，C++只是C加上一些面向对象特征。C++最初的名称C with Classes也反映了这个血缘关系。
    但是当这个语言逐渐成熟，它变得更活跃更无拘束，更大胆更冒险，开始接受不同于C with Classes的各种观念、特性和编程策略。Exception（异常）对函数的结构化带来不同的做法（见条款29），template（模版）将我们带到不同的思考方式（见条款41），STL则定义了一个前所未见的伸展性做法。
    今天的C++已经是个多重范型编程语言（multiparadigm programming language），一个同时支持过程形式（procedural）、面向对象形式（object-oriented）、函数形式（functional）、范型形式（generic）、元编程形式（metaprogramming）的语言。这些能力和弹性是C++成为一个无可匹敌的工具，但也可能引发某些迷惑：所有“适当用法”似乎都有例外。我们该如何理解这样一个语言呢？
    最简单的方法是将C++视为一个由相关语言组成的联邦而非单一语言。在其某个次语言（sublanguage）中，各种规则与通例都倾向简单、直观易懂、并且容易记住。然而当你从一个次语言移往另一个次语言，守则可能变化。为了理解C++，你必须记住主要的次语言。幸运的是直只有四个：
 ■   （1）C。说到底C++仍以C为基础。区块（blocks）、语句（statement）、预处理器（preprocessor）、内置数据类型（build-in data types）、数组（arrays）、指针（pointers）等统统来自C。许多时候C++对问题的解法其实不过就是较高级的C解法（例如条款2谈到与处理器之外的另一选择，条款13谈到以对象管理资源），但当你以C++以内的C成分工作时，高效编程守则映射出C语言的局限：没有模版（template）、没有异常（Exceptions）、没有重载（override）……
 ■   （2）Object-Oriented C++。这部分也就是C with Classes所述求的：classes（包括构造函数和析构函数），封装（encapsulation）、继承（inheritance）、多态（polymorphism）、virtual函数（动态绑定）……等等。这一部分是面向对象之古典守则在C++上的最直接实施。
 ■   （3）Template C++。这是C++的范型编程（generic programming）部分，也是大多数程序员经验最少的部分。Template相关考虑与设计已经弥漫整个C++，良好编程守则中“惟template适用”的条款并不罕见（例如条款46谈到调用template functions时如何协助类型转换）。实际上由于templare威力强大，它们带来的崭新的编程范型（programming paradigm），也就是所谓的template metaprogramming（TMP，模版元编程）。条款48对此提供了一份概述，但除非你是template激进团队的中坚骨干，大可不必担心这些。TMP相关规则很少与C++主流编程相互影响。
■    （4）STL。STL是template程序库，看名称也知道，但它是非常特殊的一个。它对容器（containers）、迭代器（iterators）、算法（algorithms）以及函数对象（function objects）的规约有极佳的紧密配合与协调，然而templates及程序库也可以其他方法建置出来。STL有自己特殊的办事方式，当你伙同STL一起工作，你必须遵守它的规约。
    记住这四个次语言，当你从某个次语言切换到另一个，导致高效编程守则要求你改变策略时，不要感到惊讶。例如对内置（也就是C-like）类型而言pass-by-value通常比pass-by-reference高效，但当你从C part of C++移往Object-Oriented C++，由于用户自定义（user-define）构造函数和析构函数的存在，pass-by-reference-to-const往往更好。运用Template C++时尤其如此，因为彼时你甚至不知道所处理的对象的类型。然而一旦跨入STL你就会了解，迭代器和函数对象就是在C指针之上塑造出来的，所以对STL的迭代器和函数对象而言，旧式的Cpass-by-value守则再次适用（参数传递方式的选择细节请见条款20）。
    因此我说，C++并不是一个带有一组守则的一体语言；它是从四个次语言组成的联邦政府，每个次语言都有自己的规约。记住这四个次语言你就会发现C++容易了解的多。
请记住
    C++高效编程守则视状况而变化，取决于你使用C++的哪一部分。
